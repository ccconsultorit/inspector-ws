/*
 * This file is generated by jOOQ.
 */
package com.inspector.ws.db.schema.tables;


import com.inspector.ws.db.schema.Indexes;
import com.inspector.ws.db.schema.Keys;
import com.inspector.ws.db.schema.Public;
import com.inspector.ws.db.schema.tables.records.TabSolImagenRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row21;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TabSolImagen extends TableImpl<TabSolImagenRecord> {

    private static final long serialVersionUID = -1424364212;

    /**
     * The reference instance of <code>public.tab_sol_imagen</code>
     */
    public static final TabSolImagen TAB_SOL_IMAGEN = new TabSolImagen();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TabSolImagenRecord> getRecordType() {
        return TabSolImagenRecord.class;
    }

    /**
     * The column <code>public.tab_sol_imagen.id_sol_imagen</code>.
     */
    public final TableField<TabSolImagenRecord, Long> ID_SOL_IMAGEN = createField(DSL.name("id_sol_imagen"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.tab_sol_imagen.nombre</code>.
     */
    public final TableField<TabSolImagenRecord, String> NOMBRE = createField(DSL.name("nombre"), org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.tab_sol_imagen.descripcion</code>.
     */
    public final TableField<TabSolImagenRecord, String> DESCRIPCION = createField(DSL.name("descripcion"), org.jooq.impl.SQLDataType.VARCHAR(200), this, "");

    /**
     * The column <code>public.tab_sol_imagen.seccion</code>.
     */
    public final TableField<TabSolImagenRecord, String> SECCION = createField(DSL.name("seccion"), org.jooq.impl.SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>public.tab_sol_imagen.imagen</code>.
     */
    public final TableField<TabSolImagenRecord, byte[]> IMAGEN = createField(DSL.name("imagen"), org.jooq.impl.SQLDataType.BLOB, this, "");

    /**
     * The column <code>public.tab_sol_imagen.estado</code>.
     */
    public final TableField<TabSolImagenRecord, String> ESTADO = createField(DSL.name("estado"), org.jooq.impl.SQLDataType.VARCHAR(1), this, "");

    /**
     * The column <code>public.tab_sol_imagen.id_sol_cal_packing_list</code>.
     */
    public final TableField<TabSolImagenRecord, Long> ID_SOL_CAL_PACKING_LIST = createField(DSL.name("id_sol_cal_packing_list"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.tab_sol_imagen.id_sol_calidad</code>.
     */
    public final TableField<TabSolImagenRecord, Long> ID_SOL_CALIDAD = createField(DSL.name("id_sol_calidad"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.tab_sol_imagen.id_sol_consolidado_gancho</code>.
     */
    public final TableField<TabSolImagenRecord, Long> ID_SOL_CONSOLIDADO_GANCHO = createField(DSL.name("id_sol_consolidado_gancho"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.tab_sol_imagen.id_sol_contenedor</code>.
     */
    public final TableField<TabSolImagenRecord, Long> ID_SOL_CONTENEDOR = createField(DSL.name("id_sol_contenedor"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.tab_sol_imagen.id_sol_control_peso</code>.
     */
    public final TableField<TabSolImagenRecord, Long> ID_SOL_CONTROL_PESO = createField(DSL.name("id_sol_control_peso"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.tab_sol_imagen.id_sol_finca</code>.
     */
    public final TableField<TabSolImagenRecord, Long> ID_SOL_FINCA = createField(DSL.name("id_sol_finca"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.tab_sol_imagen.id_sol_proceso</code>.
     */
    public final TableField<TabSolImagenRecord, Long> ID_SOL_PROCESO = createField(DSL.name("id_sol_proceso"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.tab_sol_imagen.id_sol_sello_instalado</code>.
     */
    public final TableField<TabSolImagenRecord, Long> ID_SOL_SELLO_INSTALADO = createField(DSL.name("id_sol_sello_instalado"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.tab_sol_imagen.id_sol_sello_llegada</code>.
     */
    public final TableField<TabSolImagenRecord, Long> ID_SOL_SELLO_LLEGADA = createField(DSL.name("id_sol_sello_llegada"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.tab_sol_imagen.id_sol_transportista</code>.
     */
    public final TableField<TabSolImagenRecord, Long> ID_SOL_TRANSPORTISTA = createField(DSL.name("id_sol_transportista"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.tab_sol_imagen.fecha_ingreso</code>.
     */
    public final TableField<TabSolImagenRecord, LocalDateTime> FECHA_INGRESO = createField(DSL.name("fecha_ingreso"), org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * The column <code>public.tab_sol_imagen.fecha_modifica</code>.
     */
    public final TableField<TabSolImagenRecord, LocalDateTime> FECHA_MODIFICA = createField(DSL.name("fecha_modifica"), org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * The column <code>public.tab_sol_imagen.usuario_ingreso</code>.
     */
    public final TableField<TabSolImagenRecord, Integer> USUARIO_INGRESO = createField(DSL.name("usuario_ingreso"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.tab_sol_imagen.usuario_modifica</code>.
     */
    public final TableField<TabSolImagenRecord, Integer> USUARIO_MODIFICA = createField(DSL.name("usuario_modifica"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.tab_sol_imagen.id_solicitud</code>.
     */
    public final TableField<TabSolImagenRecord, Long> ID_SOLICITUD = createField(DSL.name("id_solicitud"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * Create a <code>public.tab_sol_imagen</code> table reference
     */
    public TabSolImagen() {
        this(DSL.name("tab_sol_imagen"), null);
    }

    /**
     * Create an aliased <code>public.tab_sol_imagen</code> table reference
     */
    public TabSolImagen(String alias) {
        this(DSL.name(alias), TAB_SOL_IMAGEN);
    }

    /**
     * Create an aliased <code>public.tab_sol_imagen</code> table reference
     */
    public TabSolImagen(Name alias) {
        this(alias, TAB_SOL_IMAGEN);
    }

    private TabSolImagen(Name alias, Table<TabSolImagenRecord> aliased) {
        this(alias, aliased, null);
    }

    private TabSolImagen(Name alias, Table<TabSolImagenRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> TabSolImagen(Table<O> child, ForeignKey<O, TabSolImagenRecord> key) {
        super(child, key, TAB_SOL_IMAGEN);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TAB_SOL_IMAGEN_PKEY);
    }

    @Override
    public UniqueKey<TabSolImagenRecord> getPrimaryKey() {
        return Keys.TAB_SOL_IMAGEN_PKEY;
    }

    @Override
    public List<UniqueKey<TabSolImagenRecord>> getKeys() {
        return Arrays.<UniqueKey<TabSolImagenRecord>>asList(Keys.TAB_SOL_IMAGEN_PKEY);
    }

    @Override
    public List<ForeignKey<TabSolImagenRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<TabSolImagenRecord, ?>>asList(Keys.TAB_SOL_IMAGEN__TAB_SOL_IMAGEN_USUARIO_INGRESO_FKEY, Keys.TAB_SOL_IMAGEN__TAB_SOL_IMAGEN_USUARIO_MODIFICA_FKEY, Keys.TAB_SOL_IMAGEN__TAB_SOL_IMAGEN_ID_SOLICITUD_FKEY);
    }

    public TabUsuario tabSolImagen_TabSolImagenUsuarioIngresoFkey() {
        return new TabUsuario(this, Keys.TAB_SOL_IMAGEN__TAB_SOL_IMAGEN_USUARIO_INGRESO_FKEY);
    }

    public TabUsuario tabSolImagen_TabSolImagenUsuarioModificaFkey() {
        return new TabUsuario(this, Keys.TAB_SOL_IMAGEN__TAB_SOL_IMAGEN_USUARIO_MODIFICA_FKEY);
    }

    public TabSolicitud tabSolicitud() {
        return new TabSolicitud(this, Keys.TAB_SOL_IMAGEN__TAB_SOL_IMAGEN_ID_SOLICITUD_FKEY);
    }

    @Override
    public TabSolImagen as(String alias) {
        return new TabSolImagen(DSL.name(alias), this);
    }

    @Override
    public TabSolImagen as(Name alias) {
        return new TabSolImagen(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TabSolImagen rename(String name) {
        return new TabSolImagen(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TabSolImagen rename(Name name) {
        return new TabSolImagen(name, null);
    }

    // -------------------------------------------------------------------------
    // Row21 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row21<Long, String, String, String, byte[], String, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, LocalDateTime, LocalDateTime, Integer, Integer, Long> fieldsRow() {
        return (Row21) super.fieldsRow();
    }
}
