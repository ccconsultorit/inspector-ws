/*
 * This file is generated by jOOQ.
 */
package com.inspector.ws.db.schema.tables;


import com.inspector.ws.db.schema.Indexes;
import com.inspector.ws.db.schema.Keys;
import com.inspector.ws.db.schema.Public;
import com.inspector.ws.db.schema.tables.records.TabUsuarioRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TabUsuario extends TableImpl<TabUsuarioRecord> {

    private static final long serialVersionUID = -1567145625;

    /**
     * The reference instance of <code>public.tab_usuario</code>
     */
    public static final TabUsuario TAB_USUARIO = new TabUsuario();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TabUsuarioRecord> getRecordType() {
        return TabUsuarioRecord.class;
    }

    /**
     * The column <code>public.tab_usuario.id_usuario</code>.
     */
    public final TableField<TabUsuarioRecord, Integer> ID_USUARIO = createField(DSL.name("id_usuario"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.tab_usuario.usuario</code>.
     */
    public final TableField<TabUsuarioRecord, String> USUARIO = createField(DSL.name("usuario"), org.jooq.impl.SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>public.tab_usuario.nombres</code>.
     */
    public final TableField<TabUsuarioRecord, String> NOMBRES = createField(DSL.name("nombres"), org.jooq.impl.SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.tab_usuario.apellidos</code>.
     */
    public final TableField<TabUsuarioRecord, String> APELLIDOS = createField(DSL.name("apellidos"), org.jooq.impl.SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.tab_usuario.telefono</code>.
     */
    public final TableField<TabUsuarioRecord, String> TELEFONO = createField(DSL.name("telefono"), org.jooq.impl.SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>public.tab_usuario.celular</code>.
     */
    public final TableField<TabUsuarioRecord, String> CELULAR = createField(DSL.name("celular"), org.jooq.impl.SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>public.tab_usuario.clave</code>.
     */
    public final TableField<TabUsuarioRecord, String> CLAVE = createField(DSL.name("clave"), org.jooq.impl.SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.tab_usuario.direccion</code>.
     */
    public final TableField<TabUsuarioRecord, String> DIRECCION = createField(DSL.name("direccion"), org.jooq.impl.SQLDataType.VARCHAR(200), this, "");

    /**
     * The column <code>public.tab_usuario.estado</code>.
     */
    public final TableField<TabUsuarioRecord, String> ESTADO = createField(DSL.name("estado"), org.jooq.impl.SQLDataType.VARCHAR(1), this, "");

    /**
     * The column <code>public.tab_usuario.fecha_ingreso</code>.
     */
    public final TableField<TabUsuarioRecord, LocalDateTime> FECHA_INGRESO = createField(DSL.name("fecha_ingreso"), org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * The column <code>public.tab_usuario.fecha_modifica</code>.
     */
    public final TableField<TabUsuarioRecord, LocalDateTime> FECHA_MODIFICA = createField(DSL.name("fecha_modifica"), org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * The column <code>public.tab_usuario.correo</code>.
     */
    public final TableField<TabUsuarioRecord, String> CORREO = createField(DSL.name("correo"), org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * Create a <code>public.tab_usuario</code> table reference
     */
    public TabUsuario() {
        this(DSL.name("tab_usuario"), null);
    }

    /**
     * Create an aliased <code>public.tab_usuario</code> table reference
     */
    public TabUsuario(String alias) {
        this(DSL.name(alias), TAB_USUARIO);
    }

    /**
     * Create an aliased <code>public.tab_usuario</code> table reference
     */
    public TabUsuario(Name alias) {
        this(alias, TAB_USUARIO);
    }

    private TabUsuario(Name alias, Table<TabUsuarioRecord> aliased) {
        this(alias, aliased, null);
    }

    private TabUsuario(Name alias, Table<TabUsuarioRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> TabUsuario(Table<O> child, ForeignKey<O, TabUsuarioRecord> key) {
        super(child, key, TAB_USUARIO);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TAB_USUARIO_PKEY);
    }

    @Override
    public UniqueKey<TabUsuarioRecord> getPrimaryKey() {
        return Keys.TAB_USUARIO_PKEY;
    }

    @Override
    public List<UniqueKey<TabUsuarioRecord>> getKeys() {
        return Arrays.<UniqueKey<TabUsuarioRecord>>asList(Keys.TAB_USUARIO_PKEY);
    }

    @Override
    public TabUsuario as(String alias) {
        return new TabUsuario(DSL.name(alias), this);
    }

    @Override
    public TabUsuario as(Name alias) {
        return new TabUsuario(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TabUsuario rename(String name) {
        return new TabUsuario(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TabUsuario rename(Name name) {
        return new TabUsuario(name, null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<Integer, String, String, String, String, String, String, String, String, LocalDateTime, LocalDateTime, String> fieldsRow() {
        return (Row12) super.fieldsRow();
    }
}
