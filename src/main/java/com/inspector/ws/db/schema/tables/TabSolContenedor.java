/*
 * This file is generated by jOOQ.
 */
package com.inspector.ws.db.schema.tables;


import com.inspector.ws.db.schema.Indexes;
import com.inspector.ws.db.schema.Keys;
import com.inspector.ws.db.schema.Public;
import com.inspector.ws.db.schema.tables.records.TabSolContenedorRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row19;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TabSolContenedor extends TableImpl<TabSolContenedorRecord> {

    private static final long serialVersionUID = -182544601;

    /**
     * The reference instance of <code>public.tab_sol_contenedor</code>
     */
    public static final TabSolContenedor TAB_SOL_CONTENEDOR = new TabSolContenedor();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TabSolContenedorRecord> getRecordType() {
        return TabSolContenedorRecord.class;
    }

    /**
     * The column <code>public.tab_sol_contenedor.id_sol_contenedor</code>.
     */
    public final TableField<TabSolContenedorRecord, Long> ID_SOL_CONTENEDOR = createField(DSL.name("id_sol_contenedor"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.tab_sol_contenedor.nro_contenedor</code>.
     */
    public final TableField<TabSolContenedorRecord, String> NRO_CONTENEDOR = createField(DSL.name("nro_contenedor"), org.jooq.impl.SQLDataType.VARCHAR(50).defaultValue(org.jooq.impl.DSL.field("''::character varying", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.tab_sol_contenedor.vapor</code>.
     */
    public final TableField<TabSolContenedorRecord, String> VAPOR = createField(DSL.name("vapor"), org.jooq.impl.SQLDataType.VARCHAR(50).defaultValue(org.jooq.impl.DSL.field("''::character varying", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.tab_sol_contenedor.booking</code>.
     */
    public final TableField<TabSolContenedorRecord, String> BOOKING = createField(DSL.name("booking"), org.jooq.impl.SQLDataType.VARCHAR(50).defaultValue(org.jooq.impl.DSL.field("''::character varying", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.tab_sol_contenedor.tipo_contenedor</code>.
     */
    public final TableField<TabSolContenedorRecord, String> TIPO_CONTENEDOR = createField(DSL.name("tipo_contenedor"), org.jooq.impl.SQLDataType.VARCHAR(50).defaultValue(org.jooq.impl.DSL.field("''::character varying", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.tab_sol_contenedor.agencia_naviera</code>.
     */
    public final TableField<TabSolContenedorRecord, String> AGENCIA_NAVIERA = createField(DSL.name("agencia_naviera"), org.jooq.impl.SQLDataType.VARCHAR(50).defaultValue(org.jooq.impl.DSL.field("''::character varying", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.tab_sol_contenedor.tare</code>.
     */
    public final TableField<TabSolContenedorRecord, String> TARE = createField(DSL.name("tare"), org.jooq.impl.SQLDataType.VARCHAR(50).defaultValue(org.jooq.impl.DSL.field("''::character varying", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.tab_sol_contenedor.max_gross</code>.
     */
    public final TableField<TabSolContenedorRecord, String> MAX_GROSS = createField(DSL.name("max_gross"), org.jooq.impl.SQLDataType.VARCHAR(50).defaultValue(org.jooq.impl.DSL.field("''::character varying", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.tab_sol_contenedor.puerto_salida</code>.
     */
    public final TableField<TabSolContenedorRecord, String> PUERTO_SALIDA = createField(DSL.name("puerto_salida"), org.jooq.impl.SQLDataType.VARCHAR(100).defaultValue(org.jooq.impl.DSL.field("''::character varying", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.tab_sol_contenedor.fecha_llegada</code>.
     */
    public final TableField<TabSolContenedorRecord, LocalDateTime> FECHA_LLEGADA = createField(DSL.name("fecha_llegada"), org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * The column <code>public.tab_sol_contenedor.fecha_apertura</code>.
     */
    public final TableField<TabSolContenedorRecord, LocalDateTime> FECHA_APERTURA = createField(DSL.name("fecha_apertura"), org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * The column <code>public.tab_sol_contenedor.fecha_cierre</code>.
     */
    public final TableField<TabSolContenedorRecord, LocalDateTime> FECHA_CIERRE = createField(DSL.name("fecha_cierre"), org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * The column <code>public.tab_sol_contenedor.fecha_salida</code>.
     */
    public final TableField<TabSolContenedorRecord, LocalDateTime> FECHA_SALIDA = createField(DSL.name("fecha_salida"), org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * The column <code>public.tab_sol_contenedor.observacion</code>.
     */
    public final TableField<TabSolContenedorRecord, String> OBSERVACION = createField(DSL.name("observacion"), org.jooq.impl.SQLDataType.VARCHAR(1000).defaultValue(org.jooq.impl.DSL.field("''::character varying", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.tab_sol_contenedor.fecha_ingreso</code>.
     */
    public final TableField<TabSolContenedorRecord, LocalDateTime> FECHA_INGRESO = createField(DSL.name("fecha_ingreso"), org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * The column <code>public.tab_sol_contenedor.fecha_modifica</code>.
     */
    public final TableField<TabSolContenedorRecord, LocalDateTime> FECHA_MODIFICA = createField(DSL.name("fecha_modifica"), org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * The column <code>public.tab_sol_contenedor.usuario_ingreso</code>.
     */
    public final TableField<TabSolContenedorRecord, Integer> USUARIO_INGRESO = createField(DSL.name("usuario_ingreso"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.tab_sol_contenedor.usuario_modifica</code>.
     */
    public final TableField<TabSolContenedorRecord, Integer> USUARIO_MODIFICA = createField(DSL.name("usuario_modifica"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.tab_sol_contenedor.id_solicitud</code>.
     */
    public final TableField<TabSolContenedorRecord, Long> ID_SOLICITUD = createField(DSL.name("id_solicitud"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * Create a <code>public.tab_sol_contenedor</code> table reference
     */
    public TabSolContenedor() {
        this(DSL.name("tab_sol_contenedor"), null);
    }

    /**
     * Create an aliased <code>public.tab_sol_contenedor</code> table reference
     */
    public TabSolContenedor(String alias) {
        this(DSL.name(alias), TAB_SOL_CONTENEDOR);
    }

    /**
     * Create an aliased <code>public.tab_sol_contenedor</code> table reference
     */
    public TabSolContenedor(Name alias) {
        this(alias, TAB_SOL_CONTENEDOR);
    }

    private TabSolContenedor(Name alias, Table<TabSolContenedorRecord> aliased) {
        this(alias, aliased, null);
    }

    private TabSolContenedor(Name alias, Table<TabSolContenedorRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> TabSolContenedor(Table<O> child, ForeignKey<O, TabSolContenedorRecord> key) {
        super(child, key, TAB_SOL_CONTENEDOR);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TAB_SOL_CONTENEDOR_PKEY);
    }

    @Override
    public UniqueKey<TabSolContenedorRecord> getPrimaryKey() {
        return Keys.TAB_SOL_CONTENEDOR_PKEY;
    }

    @Override
    public List<UniqueKey<TabSolContenedorRecord>> getKeys() {
        return Arrays.<UniqueKey<TabSolContenedorRecord>>asList(Keys.TAB_SOL_CONTENEDOR_PKEY);
    }

    @Override
    public List<ForeignKey<TabSolContenedorRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<TabSolContenedorRecord, ?>>asList(Keys.TAB_SOL_CONTENEDOR__TAB_SOL_CONTENEDOR_USUARIO_INGRESO_FKEY, Keys.TAB_SOL_CONTENEDOR__TAB_SOL_CONTENEDOR_USUARIO_MODIFICA_FKEY, Keys.TAB_SOL_CONTENEDOR__TAB_SOL_CONTENEDOR_ID_SOLICITUD_FKEY);
    }

    public TabUsuario tabSolContenedor_TabSolContenedorUsuarioIngresoFkey() {
        return new TabUsuario(this, Keys.TAB_SOL_CONTENEDOR__TAB_SOL_CONTENEDOR_USUARIO_INGRESO_FKEY);
    }

    public TabUsuario tabSolContenedor_TabSolContenedorUsuarioModificaFkey() {
        return new TabUsuario(this, Keys.TAB_SOL_CONTENEDOR__TAB_SOL_CONTENEDOR_USUARIO_MODIFICA_FKEY);
    }

    public TabSolicitud tabSolicitud() {
        return new TabSolicitud(this, Keys.TAB_SOL_CONTENEDOR__TAB_SOL_CONTENEDOR_ID_SOLICITUD_FKEY);
    }

    @Override
    public TabSolContenedor as(String alias) {
        return new TabSolContenedor(DSL.name(alias), this);
    }

    @Override
    public TabSolContenedor as(Name alias) {
        return new TabSolContenedor(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TabSolContenedor rename(String name) {
        return new TabSolContenedor(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TabSolContenedor rename(Name name) {
        return new TabSolContenedor(name, null);
    }

    // -------------------------------------------------------------------------
    // Row19 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row19<Long, String, String, String, String, String, String, String, String, LocalDateTime, LocalDateTime, LocalDateTime, LocalDateTime, String, LocalDateTime, LocalDateTime, Integer, Integer, Long> fieldsRow() {
        return (Row19) super.fieldsRow();
    }
}
