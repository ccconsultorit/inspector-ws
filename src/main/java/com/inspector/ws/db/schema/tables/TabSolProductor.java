/*
 * This file is generated by jOOQ.
 */
package com.inspector.ws.db.schema.tables;


import com.inspector.ws.db.schema.Indexes;
import com.inspector.ws.db.schema.Keys;
import com.inspector.ws.db.schema.Public;
import com.inspector.ws.db.schema.tables.records.TabSolProductorRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TabSolProductor extends TableImpl<TabSolProductorRecord> {

    private static final long serialVersionUID = -1579435360;

    /**
     * The reference instance of <code>public.tab_sol_productor</code>
     */
    public static final TabSolProductor TAB_SOL_PRODUCTOR = new TabSolProductor();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TabSolProductorRecord> getRecordType() {
        return TabSolProductorRecord.class;
    }

    /**
     * The column <code>public.tab_sol_productor.id_sol_productor</code>.
     */
    public final TableField<TabSolProductorRecord, Long> ID_SOL_PRODUCTOR = createField(DSL.name("id_sol_productor"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.tab_sol_productor.nombre</code>.
     */
    public final TableField<TabSolProductorRecord, String> NOMBRE = createField(DSL.name("nombre"), org.jooq.impl.SQLDataType.VARCHAR(50).defaultValue(org.jooq.impl.DSL.field("''::character varying", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.tab_sol_productor.estado</code>.
     */
    public final TableField<TabSolProductorRecord, String> ESTADO = createField(DSL.name("estado"), org.jooq.impl.SQLDataType.VARCHAR(1), this, "");

    /**
     * The column <code>public.tab_sol_productor.fecha_ingreso</code>.
     */
    public final TableField<TabSolProductorRecord, LocalDateTime> FECHA_INGRESO = createField(DSL.name("fecha_ingreso"), org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * The column <code>public.tab_sol_productor.fecha_modifica</code>.
     */
    public final TableField<TabSolProductorRecord, LocalDateTime> FECHA_MODIFICA = createField(DSL.name("fecha_modifica"), org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * The column <code>public.tab_sol_productor.usuario_ingreso</code>.
     */
    public final TableField<TabSolProductorRecord, Integer> USUARIO_INGRESO = createField(DSL.name("usuario_ingreso"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.tab_sol_productor.usuario_modifica</code>.
     */
    public final TableField<TabSolProductorRecord, Integer> USUARIO_MODIFICA = createField(DSL.name("usuario_modifica"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.tab_sol_productor.id_solicitud</code>.
     */
    public final TableField<TabSolProductorRecord, Long> ID_SOLICITUD = createField(DSL.name("id_solicitud"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * Create a <code>public.tab_sol_productor</code> table reference
     */
    public TabSolProductor() {
        this(DSL.name("tab_sol_productor"), null);
    }

    /**
     * Create an aliased <code>public.tab_sol_productor</code> table reference
     */
    public TabSolProductor(String alias) {
        this(DSL.name(alias), TAB_SOL_PRODUCTOR);
    }

    /**
     * Create an aliased <code>public.tab_sol_productor</code> table reference
     */
    public TabSolProductor(Name alias) {
        this(alias, TAB_SOL_PRODUCTOR);
    }

    private TabSolProductor(Name alias, Table<TabSolProductorRecord> aliased) {
        this(alias, aliased, null);
    }

    private TabSolProductor(Name alias, Table<TabSolProductorRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> TabSolProductor(Table<O> child, ForeignKey<O, TabSolProductorRecord> key) {
        super(child, key, TAB_SOL_PRODUCTOR);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TAB_SOL_PRODUCTOR_PKEY);
    }

    @Override
    public UniqueKey<TabSolProductorRecord> getPrimaryKey() {
        return Keys.TAB_SOL_PRODUCTOR_PKEY;
    }

    @Override
    public List<UniqueKey<TabSolProductorRecord>> getKeys() {
        return Arrays.<UniqueKey<TabSolProductorRecord>>asList(Keys.TAB_SOL_PRODUCTOR_PKEY);
    }

    @Override
    public List<ForeignKey<TabSolProductorRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<TabSolProductorRecord, ?>>asList(Keys.TAB_SOL_PRODUCTOR__TAB_SOL_PRODUCTOR_USUARIO_INGRESO_FKEY, Keys.TAB_SOL_PRODUCTOR__TAB_SOL_PRODUCTOR_USUARIO_MODIFICA_FKEY, Keys.TAB_SOL_PRODUCTOR__TAB_SOL_PRODUCTOR_ID_SOLICITUD_FKEY);
    }

    public TabUsuario tabSolProductor_TabSolProductorUsuarioIngresoFkey() {
        return new TabUsuario(this, Keys.TAB_SOL_PRODUCTOR__TAB_SOL_PRODUCTOR_USUARIO_INGRESO_FKEY);
    }

    public TabUsuario tabSolProductor_TabSolProductorUsuarioModificaFkey() {
        return new TabUsuario(this, Keys.TAB_SOL_PRODUCTOR__TAB_SOL_PRODUCTOR_USUARIO_MODIFICA_FKEY);
    }

    public TabSolicitud tabSolicitud() {
        return new TabSolicitud(this, Keys.TAB_SOL_PRODUCTOR__TAB_SOL_PRODUCTOR_ID_SOLICITUD_FKEY);
    }

    @Override
    public TabSolProductor as(String alias) {
        return new TabSolProductor(DSL.name(alias), this);
    }

    @Override
    public TabSolProductor as(Name alias) {
        return new TabSolProductor(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TabSolProductor rename(String name) {
        return new TabSolProductor(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TabSolProductor rename(Name name) {
        return new TabSolProductor(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Long, String, String, LocalDateTime, LocalDateTime, Integer, Integer, Long> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
